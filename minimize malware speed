class Solution {

     vector<int> prnt, rnk;

    int find(int u) {
        if(prnt[u] == u) return u;
        return prnt[u] = find(prnt[u]);
    }

    void merge(int u, int v) {
        u = find(u);
        v = find(v);
        
        if(u == v)
            return;

        if(rnk[u] < rnk[v]) swap(u, v);

        rnk[u] += rnk[v];
        prnt[v] = u;
    }
    
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        
        rnk = vector<int>(n, 1);
        prnt = vector<int>(n);
        
        for(int i = 0; i < n; i++)
            prnt[i] = i;
        
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                if(graph[i][j] == 1) {
                    if(find(i) != find(j))
                        merge(i, j);
                }
            }
        }
        
        vector<int> prnt_cnt(n, 0);
        for(int i: initial) 
            prnt_cnt[find(i)]++;
        
        int mx = -1;
        int ans = n+1;
        for(int i: initial) {
            int u = find(i);
            if(prnt_cnt[u] == 1 && rnk[u] >= mx) {
                if(rnk[u] == mx)
                    ans = min(ans, i);
                else
                    ans = i;
                mx = rnk[u];
                
            }
        }
        
        if(ans == n+1) 
            return *min_element(initial.begin(), initial.end());
        
        return ans;
   }
    
};
