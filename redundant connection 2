// detect vertex having two parent then detect for cycle and then detect if removing any of parent gives cycle or not
class Solution {
public:
int parents[1001];
    int find(int x){
        if(parents[x]==x){
            return x;
        }
        return parents[x]=find(parents[x]);
    }
    int dsu(vector<vector<int>>& edges,int idx){
        int c=-1;
        for(int i=0;i<edges.size();i++){
            if(i==idx){
                continue;
            }
            int x=find(edges[i][0]);
            int y=find(edges[i][1]);
            if(x==y){
                c=i;
            }
            else
             parents[y]=x;
        }
        return c;
    }
    vector<int> findRedundantDirectedConnection(vector<vector<int>>& edges) {
       for(int i=0;i<1001;i++){
           parents[i]=i;
       }
        vector<int>indeg(edges.size()+1,-1);
        vector<int>bl1;
        vector<int>bl2;
        for(int i=0;i<edges.size();i++){
            if(indeg[edges[i][1]]!=-1){
                bl1.push_back(indeg[edges[i][1]]);

                bl2.push_back(i);
                
            }
            else
              indeg[edges[i][1]]=i;
        }
        vector<int>res;
       int c=-1;
        if(bl1.size()==0&&bl2.size()==0){
        
            for(int i=0;i<edges.size();i++){
                int x=find(edges[i][0]);
                int y=find(edges[i][1]);
                if(x==y){
                    c=i;
                }
                else
                  parents[y]=x;
            }
            if(c!=-1)
               res.push_back(edges[c][0]);
                res.push_back(edges[c][1]);
           return res;
        }
        int x=dsu(edges,bl1[0]);
        for(int i=0;i<1001;i++){
           parents[i]=i;
       }
        int y=dsu(edges,bl2[0]);
        // res.push_back(y);
        // return res;
       if(x==-1&&y==-1){
           res.push_back(edges[bl2[0]][0]);
           res.push_back(edges[bl2[0]][1]);
           return res;
       }
        if(x==-1){
            res.push_back(edges[bl1[0]][0]);
             res.push_back(edges[bl1[0]][1]);
        }
        if(y==-1){
             res.push_back(edges[bl2[0]][0]);
             res.push_back(edges[bl2[0]][1]);
        }
        return res;
    }
};
